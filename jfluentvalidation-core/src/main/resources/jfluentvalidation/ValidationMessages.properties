javax.validation.constraints.AssertFalse.message     = must be false
javax.validation.constraints.AssertTrue.message      = must be true
javax.validation.constraints.DecimalMax.message      = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
javax.validation.constraints.DecimalMin.message      = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
javax.validation.constraints.Digits.message          = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Email.message           = must be a well-formed email address
javax.validation.constraints.Future.message          = must be a future date
javax.validation.constraints.FutureOrPresent.message = must be a date in the present or in the future
javax.validation.constraints.Max.message             = must be less than or equal to {value}
javax.validation.constraints.Min.message             = must be greater than or equal to {value}
javax.validation.constraints.Negative.message        = must be less than 0
javax.validation.constraints.NegativeOrZero.message  = must be less than or equal to 0
javax.validation.constraints.NotBlank.message        = must not be blank
javax.validation.constraints.NotEmpty.message        = must not be empty
javax.validation.constraints.NotNull.message         = must not be null
javax.validation.constraints.Null.message            = must be null
javax.validation.constraints.Past.message            = must be a past date
javax.validation.constraints.PastOrPresent.message   = must be a date in the past or in the present
javax.validation.constraints.Pattern.message         = must match "{regexp}"
javax.validation.constraints.Positive.message        = must be greater than 0
javax.validation.constraints.PositiveOrZero.message  = must be greater than or equal to 0
javax.validation.constraints.Size.message            = size must be between {min} and {max}




jfluentvalidation.constraints.IsEmpty.message={PropertyName} must be empty
jfluentvalidation.constraints.IsEquals.message={PropertyName} should be equal to {ComparisonValue}
jfluentvalidation.constraints.IsNotEmpty.message={PropertyName} must not be empty
jfluentvalidation.constraints.IsNotNullOrEmpty.message={PropertyName} must not be null or empty
jfluentvalidation.constraints.IsNotEquals.message={PropertyName} should not be equal to {ComparisonValue}
jfluentvalidation.constraints.IsNotNull.message={PropertyName} must not be null
jfluentvalidation.constraints.IsNull.message={PropertyName} must be null
jfluentvalidation.constraints.IsNullOrEmpty.message={PropertyName} must be null or empty

jfluentvalidation.constraints.HasSize.message={PropertyName} must have size {size}


jfluentvalidation.constraints.array.Contains.message=
jfluentvalidation.constraints.array.length.ArrayExactLength.message=
jfluentvalidation.constraints.array.length.ArrayLength.message=
jfluentvalidation.constraints.array.length.ArrayBetweenLength.message=
jfluentvalidation.constraints.array.length.ArrayMaximumLength.message=
jfluentvalidation.constraints.array.length.BooleanArrayMinimumLength.message=


jfluentvalidation.constraints.charsequence.Contains.message={PropertyName} must contain {value}
jfluentvalidation.constraints.charsequence.ContainsIgnoreCase.message={PropertyName} must contain, ignoring case, {value}
jfluentvalidation.constraints.charsequence.ContainsOnlyDigits.message={PropertyName} must contain only digits
jfluentvalidation.constraints.charsequence.ContainsOnlyOnce.message={PropertyName} must only contain {value} once
jfluentvalidation.constraints.charsequence.ContainsOnlyWhitespaces.message={PropertyName} must contain only whitespace
jfluentvalidation.constraints.charsequence.ContainsPattern.message={PropertyName} must contain pattern {regex}
jfluentvalidation.constraints.charsequence.ContainsSequence.message={PropertyName} must contain sequence {value}
jfluentvalidation.constraints.charsequence.ContainsSubsequence.message={PropertyName} must contain subsequence {value}
jfluentvalidation.constraints.charsequence.ContainsWhitespaces.message={PropertyName} must contain whitespace
jfluentvalidation.constraints.charsequence.DoesNotContainAnyWhitespaces.message={PropertyName} must not contain whitespace
jfluentvalidation.constraints.charsequence.EndsWith.message={PropertyName} must end with {value}
jfluentvalidation.constraints.charsequence.HasLengthBetween.message={PropertyName} length must be between {min} and {max}
jfluentvalidation.constraints.charsequence.HasLength.message={PropertyName} must have length {length}
jfluentvalidation.constraints.charsequence.HasLengthGreaterThan.message={PropertyName} must have length greater than {value}
jfluentvalidation.constraints.charsequence.HasLengthGreaterThanOrEqualTo.message={PropertyName} must have length greater than or equal to {value}
jfluentvalidation.constraints.charsequence.HasLengthLessThan.message={PropertyName} must have length less than {value}
jfluentvalidation.constraints.charsequence.HasLengthLessThanOrEqualTo.message={PropertyName} must have length less than or equal to value {value}
jfluentvalidation.constraints.charsequence.HasSameLengthAs.message={PropertyName} must have same length as {}...perhaps we just say size?
jfluentvalidation.constraints.charsequence.IsBlank.message={PropertyName} must not be blank
jfluentvalidation.constraints.charsequence.IsEmail.message={PropertyName} is not a well-formed email address
jfluentvalidation.constraints.charsequence.IsEqualToIgnoringCase.message=
jfluentvalidation.constraints.charsequence.IsEqualToIgnoringWhitespace.message=
jfluentvalidation.constraints.charsequence.IsEqualToNormalizingWhitespace.message=
jfluentvalidation.constraints.charsequence.IsLowerCase.message={PropertyName} must be lowercase
jfluentvalidation.constraints.charsequence.IsSubstringOf.message={PropertyName} must be a substring of {value}
jfluentvalidation.constraints.charsequence.IsUpperCase.message={PropertyName} must be uppercase
jfluentvalidation.constraints.charsequence.Length.message={PropertyName} must have length {value}
jfluentvalidation.constraints.charsequence.MatchesConstraint.message={PropertyName} must match {expression}
jfluentvalidation.constraints.charsequence.StartsWith.message={PropertyName} must start with {value}



jfluentvalidation.constraints.comparable.IsBetween.message={PropertyName} must be between {min} and {max}
jfluentvalidation.constraints.comparable.IsEqualAccordingToCompareTo.message={PropertyName} must be comparatively equal to {value}
jfluentvalidation.constraints.comparable.IsGreaterThan.message={PropertyName} must be greater than {value}
jfluentvalidation.constraints.comparable.IsGreaterThanOrEqualTo.message={PropertyName} must be greater than or equal to {value}
jfluentvalidation.constraints.comparable.IsLessThan.message={PropertyName} must be less than {value}
jfluentvalidation.constraints.comparable.IsLessThanOrEqualTo.message={PropertyName} must be less than or equal to {value}
jfluentvalidation.constraints.comparable.IsNotBetween.message={PropertyName} must not be between {min} and {max}
jfluentvalidation.constraints.comparable.IsNotEqualAccordingToCompareTo.message={PropertyName} must not be comparatively equal to {value}


jfluentvalidation.constraints.file.CanRead.message={PropertyName} should be readable
jfluentvalidation.constraints.file.CanWrite.message={PropertyName} should be writeable
jfluentvalidation.constraints.file.FileExists.message={PropertyName} should be exist
jfluentvalidation.constraints.file.HasContent.message={PropertyName} should have content
jfluentvalidation.constraints.file.HasExtension.message={PropertyName} should have file with extension {}
jfluentvalidation.constraints.file.HasName.message={PropertyName} should have file with name {}
jfluentvalidation.constraints.file.IsAbsolute.message={PropertyName} should have pathname that is absolute
jfluentvalidation.constraints.file.IsDirectory.message={PropertyName} should be a directory
jfluentvalidation.constraints.file.IsFile.message={PropertyName} should be a file
jfluentvalidation.constraints.file.IsRelative.message={PropertyName} should have pathname that is relative


jfluentvalidation.constraints.inputstream.HasContent.message={PropertyName} must have content {value} with charset {charset}
jfluentvalidation.constraints.inputstream.HasSameContentAs.message={PropertyName} must have same content as {}...hmmm what to say here?


jfluentvalidation.constraints.iterable.ContainsAllIn.message=
jfluentvalidation.constraints.iterable.ContainsAnyIn.message=
jfluentvalidation.constraints.iterable.Contains.message={PropertyName} must contain {values}
jfluentvalidation.constraints.iterable.ContainsExactlyElementsIn.message=
jfluentvalidation.constraints.iterable.ContainsNoneIn.message={PropertyName} must not contain any in {values}
jfluentvalidation.constraints.iterable.DoesNotContain.message={PropertyName} must not contain {values}
jfluentvalidation.constraints.iterable.Item.message=
jfluentvalidation.constraints.iterable.IterableItem.message=


jfluentvalidation.constraints.map.ContainsEntries.message={PropertyName} must contain entries {entries}
jfluentvalidation.constraints.map.ContainsKeys.message={PropertyName} must contain keys {keys}
jfluentvalidation.constraints.map.ContainsValues.message={PropertyName} must contain values {values}
jfluentvalidation.constraints.map.Entry.message={PropertyName} must contain entry {value}
jfluentvalidation.constraints.map.Key.message={PropertyName} must contain key {value}
jfluentvalidation.constraints.map.Value.message={PropertyName} must contain value {value}
jfluentvalidation.constraints.map.DoesNotContain.message={PropertyName} must not contain {value}
jfluentvalidation.constraints.map.DoesNotContainKeys.message={PropertyName} must not contain key {value}
jfluentvalidation.constraints.map.DoesNotContainValues.message={PropertyName} must not contain value {value}


jfluentvalidation.constraints.time.IsAfter.message={PropertyName} must be a future date
jfluentvalidation.constraints.time.IsAfterOrEqual.message={PropertyName} must be a date in the present or in the future
jfluentvalidation.constraints.time.IsBefore.message={PropertyName} must be before {value}
jfluentvalidation.constraints.time.IsBeforeOrEqual.message={PropertyName} must be a date in the past or in the present
jfluentvalidation.constraints.time.IsToday.message={PropertyName} must be today's date

jfluentvalidation.constraints.HasAuthority.message={PropertyName} must have authority {value}
jfluentvalidation.constraints.HasHost.message={PropertyName} must have host {value}
jfluentvalidation.constraints.HasNoParameter.message={PropertyName} should have no parameter
jfluentvalidation.constraints.HasParameter.message=must have parameter name {PropertyName}${PropertyValue == null ? '' : ' with PropertyValue '}{PropertyValue}
jfluentvalidation.constraints.HasPath.message={PropertyName} must have path {value}
jfluentvalidation.constraints.HasPort.message={PropertyName} must have port {value}
jfluentvalidation.constraints.HasProtocol.message={PropertyName} must have protocol {value}
jfluentvalidation.constraints.HasQuery.message={PropertyName} must have query equal to {PropertyValue}

jfluentvalidation.constraints.url.HasAnchor.message={PropertyName} must have anchor {value}
jfluentvalidation.constraints.url.HasProtocol.message={PropertyName} must have protocol {value}






org.hibernate.validator.constraints.CreditCardNumber.message        = invalid credit card number
org.hibernate.validator.constraints.Currency.message                = invalid currency (must be one of {value})
org.hibernate.validator.constraints.EAN.message                     = invalid {type} barcode
org.hibernate.validator.constraints.Email.message                   = not a well-formed email address
org.hibernate.validator.constraints.ISBN.message                    = invalid ISBN
org.hibernate.validator.constraints.Length.message                  = length must be between {min} and {max}
org.hibernate.validator.constraints.CodePointLength.message         = length must be between {min} and {max}
org.hibernate.validator.constraints.LuhnCheck.message               = the check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message              = the check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message              = the check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message                = the check digit for ${validatedValue} is invalid, ${modType} checksum failed
org.hibernate.validator.constraints.NotBlank.message                = may not be empty
org.hibernate.validator.constraints.NotEmpty.message                = may not be empty
org.hibernate.validator.constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.message                   = must be between {min} and {max}
org.hibernate.validator.constraints.SafeHtml.message                = may have unsafe html content
org.hibernate.validator.constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.UniqueElements.message          = must only contain unique elements
org.hibernate.validator.constraints.URL.message                     = must be a valid URL

org.hibernate.validator.constraints.br.CNPJ.message                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = invalid Brazilian Voter ID card number

org.hibernate.validator.constraints.pl.REGON.message                = invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.time.DurationMax.message        = must be shorter than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
